*********************************************** Generate SSL certificates *************************************************

1. Create openssl.conf file

Always follow with openssl.conf file in generating SSL certificates
first create openssl.conf file add required details and generate the certificates using below commands-

*********************************************** openssl.conf ***************************************************************
[ req ]
distinguished_name = req_distinguished_name
x509_extensions    = req_ext
default_md         = sha256
prompt             = no
encrypt_key        = no

[ req_distinguished_name ]
countryName            = "GB"
localityName           = "London"
organizationName       = "IT"
organizationalUnitName = "IT"
commonName             = "172.16.24.166"
emailAddress           = "test@example.com"

[ req_ext ]
subjectAltName = @alt_names

[alt_names]
IP = "172.16.24.166"
---
DNS
when using IP addresses with https instead of DNS/hostname during testings, you should use subjectAltName field as IP instead of DNS and 
generate the certificates from that openssl.conf file
---

2. Generate SSL certificates (.crt and .key) using openssl conf file

openssl req \
 -x509 -newkey rsa:4096 -days 1825 -config openssl.conf \
 -keyout domain.key -out domain.crt

cross check the created certificate content using command: 
openssl x509 -text -noout -in domain.crt


3. use certificates in nginx settings (mount)

copy the domain.crt and domain.key files to /data/nginx/ssl (or wherver keys required for nginx) and

for artifactory, point the same in artifactory UI admin->http settings->reverseproxysettings->server provider as nginx
advance https settings ... it will reload nginx settings in running container.


4. Validate SSL certificates now

remove insecure docker settings and try docker login https://url:5001

if it prompts certificate signed by unknown authority....???
as SSL is self signed certificate and not generated by any CA authority we have to make all agents to accept the generated certificate...
so copy domain.crt file to docker certs settings....
(same thing with web browser, browser loads https now but warns as insecure as it is SSL and we should add SSL cert to browser)

create directory in /etc/docker/certs.d/ with CN(commonName) and port, here it is ip address
mkdir -p /etc/docker/certs.d/172.16.24.166:5001

take the domain.crt file from the created server and add to all docker agents as ca.crt (no need of docker restart)
cp ca.crt /etc/docker/certs.d/172.16.24.166:5001/ca.crt

and check docker login again... it works..

to add cert at os level:
ref: https://docs.docker.com/registry/insecure/#/docker-still-complains-about-the-certificate-when-using-authentication


*************************************** Generate SSL certificates from root certificate(CA) *******************************************

5. Create SSL certificates from root certificate(CA)

SSL certs will only work in local environment and no one will able to trust them. So for production environments,
we have to create secure SSL using parent root CA validated certificate.(Organization certificate which is registered)
We can create many certificates using one as root certificate.

Input: ca.pem/ca.cert and ca.key (cert and key file)

#First create your SSL private key:
openssl genrsa -out domain.key 2048

#Generate csr key (certificae signing request)
openssl req -new -key domain.key -out domain.csr

#Create your SSL certificate:
openssl x509 -req -in domain.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial \
-out domain.crt -days 1825 -sha256 -extfile openssl.conf

******************************* It will create domain.crt and domain.key using domain.csr, ca.crt and ca.key files ******************

Now, new SSL are accepted everywhere without insecure warnings in browsers and logins.

ref: https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/


